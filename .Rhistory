library(plotly)
# Read in the data.
brewing_materials <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/brewing_materials.csv')
beer_taxed <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/beer_taxed.csv')
brewer_size <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/brewer_size.csv')
beer_states <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/beer_states.csv')
hops1 <- brewing_materials %>%
mutate(date = make_date(year, month)) %>%
group_by(date, type) %>%
summarize(avg = mean(month_current)) %>%
filter(!type %in% c('Total Grain products', 'Other', 'Total Non-Grain products', 'Total Used'))
time_series1 <- hops1 %>%
ggplot(aes(x = date, y = avg, group = type)) +
geom_line(aes(color = type)) +
theme(axis.text.x = element_text(angle = 90))
time_series1
hops2 <- brewing_materials %>%
mutate(date = make_date(year, month)) %>%
filter(date >= '2008-01-01' & date <= '2013-12-01') %>%
group_by(date, type) %>%
summarize(avg = mean(month_current)) %>% ungroup() %>%
filter(type == 'Malt and malt products') %>%
mutate(date = ymd(date, truncated = 1))
time_series2 <- hops2 %>%
ggplot(aes(x = date, y = avg, group = type)) +
geom_line(aes(color = type)) +
theme(axis.text.x = element_text(angle = 90))
time_series2
class(hops2)
library(tsibble)
tsibble <- as_tsibble(hops2, index = date, key = type)
class(tsibble$date)
head(tsibble$date)
head(tsibble)
tsibble <- tsibble %>%
mutate(date = yearmonth(date))
class(tsibble$date)
class(tsibble)
library(TSstudio)
seasonal <- ts(data = tsibble$avg, start = c(2008, 1), end = c(2013, 12), frequency = 12)
ts_plot(seasonal,
line.mode = "lines+markers",
Ygrid = T, slider = T,
title = "Malts Over Time",
Ytitle = "Millions of Barrels")
ts_cor(seasonal, seasonal_lags = 12, lag.max = 60)
ts_seasonal(seasonal, type = 'all')
library(forecastLM)
lm1 <- trainLM(input = tsibble,
y = "avg",
trend = list(linear = TRUE),
seasonal = "month")
summary(lm1$model)
lm2  <- trainLM(input = tsibble,
y = "avg",
trend = list(linear = TRUE),
seasonal = "month",
lags = c(1))
summary(lm2$model)
plot_res(lm2)
events <- list(outlier = c(as_date("2009-01-01"), as_date("2009-09-01"), as_date("2010-05-01"), as_date("2010-12-01"), as_date("2014-12-01"), as_date("2011-09-01")))
lm3  <- trainLM(input = seasonal,
y = "avg",
trend = list(log = TRUE),
seasonal = "month",
lags = c(1),
step = TRUE,
events = events)
summary(lm3$model)
plot_res(lm3)
# Using the lm3 prediction model.
fc3 <- forecastLM(lm3, h = 24)
# Plot it.
plot_fc(fc3, theme = 'classic')
ts_cor(tsibble, seasonal_lags = 12, lag.max = 60)
ts_cor(seasonal, seasonal_lags = 12, lag.max = 60)
ts_cor(seasonal, seasonal_lags = 12, lag.max = 48)
ts_cor(seasonal)
? ts_cor
library(TSstudio)
seasonal <- ts(data = tsibble$avg, start = c(2008, 1), end = c(2014, 1), frequency = 12)
ts_plot(seasonal,
line.mode = "lines+markers",
Ygrid = T, slider = T,
title = "Malts Over Time",
Ytitle = "Millions of Barrels")
ts_cor(seasonal)
library(TSstudio)
seasonal <- ts(data = tsibble$avg, start = c(2008, 1), end = c(2013, 12), frequency = 12)
ts_plot(seasonal,
line.mode = "lines+markers",
Ygrid = T, slider = T,
title = "Malts Over Time",
Ytitle = "Millions of Barrels")
knitr::opts_chunk$set(cache = TRUE, warning = FALSE, message = FALSE,
echo = TRUE,  cache.lazy = FALSE,
fig.width = 8, fig.height = 7)
library(tidyverse)
library(janitor)
library(lubridate)
library(plotly)
# Read in the data.
brewing_materials <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/brewing_materials.csv')
beer_taxed <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/beer_taxed.csv')
brewer_size <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/brewer_size.csv')
beer_states <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/beer_states.csv')
hops1 <- brewing_materials %>%
mutate(date = make_date(year, month)) %>%
group_by(date, type) %>%
summarize(avg = mean(month_current)) %>%
filter(!type %in% c('Total Grain products', 'Other', 'Total Non-Grain products', 'Total Used'))
time_series1 <- hops1 %>%
ggplot(aes(x = date, y = avg, group = type)) +
geom_line(aes(color = type)) +
theme(axis.text.x = element_text(angle = 90))
time_series1
hops2 <- brewing_materials %>%
mutate(date = make_date(year, month)) %>%
filter(date >= '2008-01-01' & date <= '2013-12-01') %>%
group_by(date, type) %>%
summarize(avg = mean(month_current)) %>% ungroup() %>%
filter(type == 'Malt and malt products') %>%
mutate(date = ymd(date, truncated = 1))
time_series2 <- hops2 %>%
ggplot(aes(x = date, y = avg, group = type)) +
geom_line(aes(color = type)) +
theme(axis.text.x = element_text(angle = 90))
time_series2
class(hops2)
library(tsibble)
tsibble <- as_tsibble(hops2, index = date, key = type)
class(tsibble$date)
head(tsibble$date)
head(tsibble)
tsibble <- tsibble %>%
mutate(date = yearmonth(date))
class(tsibble$date)
class(tsibble)
library(TSstudio)
seasonal <- ts(data = tsibble$avg, start = c(2008, 1), end = c(2013, 12), frequency = 12)
ts_plot(seasonal,
line.mode = "lines+markers",
Ygrid = T, slider = T,
title = "Malts Over Time",
Ytitle = "Millions of Barrels")
ts_cor(seasonal)
blogdown:::serve_site()
servr::daemon_stop()
blogdown:::serve_site()
knitr::opts_chunk$set(cache = TRUE, warning = FALSE, message = FALSE,
echo = TRUE,  cache.lazy = FALSE,
fig.width = 8, fig.height = 7)
library(tidyverse)
library(janitor)
library(lubridate)
library(plotly)
# Read in the data.
brewing_materials <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/brewing_materials.csv')
beer_taxed <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/beer_taxed.csv')
brewer_size <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/brewer_size.csv')
beer_states <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/beer_states.csv')
hops1 <- brewing_materials %>%
mutate(date = make_date(year, month)) %>%
group_by(date, type) %>%
summarize(avg = mean(month_current)) %>%
filter(!type %in% c('Total Grain products', 'Other', 'Total Non-Grain products', 'Total Used'))
time_series1 <- hops1 %>%
ggplot(aes(x = date, y = avg, group = type)) +
geom_line(aes(color = type)) +
theme(axis.text.x = element_text(angle = 90))
time_series1
hops2 <- brewing_materials %>%
mutate(date = make_date(year, month)) %>%
filter(date >= '2008-01-01' & date <= '2013-12-01') %>%
group_by(date, type) %>%
summarize(avg = mean(month_current)) %>% ungroup() %>%
filter(type == 'Malt and malt products') %>%
mutate(date = ymd(date, truncated = 1))
time_series2 <- hops2 %>%
ggplot(aes(x = date, y = avg, group = type)) +
geom_line(aes(color = type)) +
theme(axis.text.x = element_text(angle = 90))
time_series2
class(hops2)
library(tsibble)
tsibble <- as_tsibble(hops2, index = date, key = type)
class(tsibble$date)
head(tsibble$date)
head(tsibble)
tsibble <- tsibble %>%
mutate(date = yearmonth(date))
class(tsibble$date)
class(tsibble)
library(TSstudio)
seasonal <- ts(data = tsibble$avg, start = c(2008, 1), end = c(2013, 12), frequency = 12)
ts_plot(seasonal,
line.mode = "lines+markers",
Ygrid = T, slider = T,
title = "Malts Over Time",
Ytitle = "Millions of Barrels")
ts_cor(seasonal)
ts_seasonal(seasonal, type = 'all')
library(forecastLM)
lm1 <- trainLM(input = tsibble,
y = "avg",
trend = list(linear = TRUE),
seasonal = "month")
summary(lm1$model)
lm2  <- trainLM(input = tsibble,
y = "avg",
trend = list(linear = TRUE),
seasonal = "month",
lags = c(1))
summary(lm2$model)
plot_res(lm2)
events <- list(outlier = c(as_date("2009-01-01"), as_date("2009-09-01"), as_date("2010-05-01"), as_date("2010-12-01"), as_date("2014-12-01"), as_date("2011-09-01")))
lm3  <- trainLM(input = seasonal,
y = "avg",
trend = list(log = TRUE),
seasonal = "month",
lags = c(1),
step = TRUE,
events = events)
summary(lm3$model)
plot_res(lm3)
# Using the lm3 prediction model.
fc3 <- forecastLM(lm3, h = 24)
# Plot it.
plot_fc(fc3, theme = 'classic')
View(lm3)
? ts_cor
ts_cor(seasonal, seasonal = True)
ts_cor(seasonal, seasonal = TRUE)
ts_cor(seasonal)
ts_cor(seasonal, seasonal_lags = 4)
ts_cor(seasonal, lag.max = 36)
knitr::opts_chunk$set(cache = TRUE, warning = FALSE, message = FALSE,
echo = TRUE,  cache.lazy = FALSE)
library(tidyverse)
library(janitor)
library(lubridate)
library(plotly)
# Read in the data.
brewing_materials <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/brewing_materials.csv')
beer_taxed <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/beer_taxed.csv')
brewer_size <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/brewer_size.csv')
beer_states <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/beer_states.csv')
hops1 <- brewing_materials %>%
mutate(date = make_date(year, month)) %>%
group_by(date, type) %>%
summarize(avg = mean(month_current)) %>%
filter(!type %in% c('Total Grain products', 'Other', 'Total Non-Grain products', 'Total Used'))
time_series1 <- hops1 %>%
ggplot(aes(x = date, y = avg, group = type)) +
geom_line(aes(color = type)) +
theme(axis.text.x = element_text(angle = 90))
time_series1
hops2 <- brewing_materials %>%
mutate(date = make_date(year, month)) %>%
filter(date >= '2008-01-01' & date <= '2013-12-01') %>%
group_by(date, type) %>%
summarize(avg = mean(month_current)) %>% ungroup() %>%
filter(type == 'Malt and malt products') %>%
mutate(date = ymd(date, truncated = 1))
time_series2 <- hops2 %>%
ggplot(aes(x = date, y = avg, group = type)) +
geom_line(aes(color = type)) +
theme(axis.text.x = element_text(angle = 90))
time_series2
class(hops2)
library(tsibble)
tsibble <- as_tsibble(hops2, index = date, key = type)
class(tsibble$date)
head(tsibble$date)
head(tsibble)
tsibble <- tsibble %>%
mutate(date = yearmonth(date))
class(tsibble$date)
class(tsibble)
library(TSstudio)
seasonal <- ts(data = tsibble$avg, start = c(2008, 1), end = c(2013, 12), frequency = 12)
ts_plot(seasonal,
line.mode = "lines+markers",
Ygrid = T, slider = T,
title = "Malts Over Time",
Ytitle = "Millions of Barrels")
ts_cor(seasonal, lag.max = 36)
ts_seasonal(seasonal, type = 'all')
library(forecastLM)
lm1 <- trainLM(input = tsibble,
y = "avg",
trend = list(linear = TRUE),
seasonal = "month")
summary(lm1$model)
lm2  <- trainLM(input = tsibble,
y = "avg",
trend = list(linear = TRUE),
seasonal = "month",
lags = c(1))
summary(lm2$model)
plot_res(lm2)
events <- list(outlier = c(as_date("2009-01-01"), as_date("2009-09-01"), as_date("2010-05-01"), as_date("2010-12-01"), as_date("2014-12-01"), as_date("2011-09-01")))
lm3  <- trainLM(input = seasonal,
y = "avg",
trend = list(log = TRUE),
seasonal = "month",
lags = c(1),
step = TRUE,
events = events)
summary(lm3$model)
plot_res(lm3)
# Using the lm3 prediction model.
fc3 <- forecastLM(lm3, h = 24)
# Plot it.
plot_fc(fc3, theme = 'classic')
? plot_fc
# Plot it.
plot_fc(fc3, theme = 'classic',
title = "help")
# Plot it.
plot_fc(fc3, theme = 'classic')
blogdown:::serve_site()
blogdown:::serve_site()
knitr::opts_chunk$set(cache = TRUE, warning = FALSE, message = FALSE,
echo = TRUE,  cache.lazy = FALSE)
library(tidyverse)
library(janitor)
library(tidylog)
# Read in the data, although I probably wont need it all.
critic <- readr::read_tsv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/critic.tsv')
user_reviews <- readr::read_tsv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/user_reviews.tsv')
items <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/items.csv')
villagers <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/villagers.csv')
library(tidyverse)
library(janitor)
library(tidylog)
knitr::opts_chunk$set(cache = TRUE, warning = FALSE, message = FALSE,
echo = TRUE,  cache.lazy = FALSE)
library(tidyverse)
library(janitor)
library(tidyLPA)
# Read in the data, although I probably wont need it all.
critic <- readr::read_tsv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/critic.tsv')
user_reviews <- readr::read_tsv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/user_reviews.tsv')
items <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/items.csv')
villagers <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/villagers.csv')
View(villagers)
cleaning <- villagers %>%
select(-row_n)
View(cleaning)
cleaning <- villagers %>%
select(-row_n) %>%
distinct()
cleaning <- villagers %>%
select(-row_n, -id, -phrase:-url)
View(villagers)
View(items)
View(villagers)
View(items)
View(user_reviews)
View(critic)
View(villagers)
View(villagers)
? separate
cleaning <- villagers %>%
select(-row_n, -id, -phrase:-url) %>% #remove unneeded columns to examine villager commonalities (profiles)
separate(birthday, into = c("month", "day"), sep = "-", remove = FALSE)
cleaning <- villagers %>%
select(-row_n, -id, -phrase:-url) %>% #remove unneeded columns to examine villager commonalities (profiles)
separate(birthday, into = c("month", "day"), sep = "-")
cleaning <- villagers %>%
select(-row_n, -id, -phrase:-url) %>% #remove unneeded columns to examine villager commonalities (profiles)
separate(birthday, into = c("month", "day"), sep = "-") %>%
select(-day) %>% # not likely needed herein
rename(id = name)
library(recipes)
knitr::opts_chunk$set(cache = TRUE, warning = FALSE, message = FALSE,
echo = TRUE,  cache.lazy = FALSE)
library(tidyverse)
library(janitor)
library(tidyLPA)
library(recipes)
# Read in the data, although I probably wont need it all.
critic <- readr::read_tsv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/critic.tsv')
user_reviews <- readr::read_tsv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/user_reviews.tsv')
items <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/items.csv')
villagers <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/villagers.csv')
cleaned <- villagers %>%
select(-row_n, -id, -phrase:-url) %>% #remove unneeded columns to examine villager commonalities (profiles)
separate(birthday, into = c("month", "day"), sep = "-") %>%
select(-day) %>% # not likely needed herein
rename(id = name)
? recipe
preped <- cleaned %>%
recipe(~ .) %>%
step_dummy(gender, species, personality, song) %>%
prep(training = cleaned) %>%
bake(newdata = cleaned)
preped <- cleaned %>%
recipe(~ .) %>%
step_dummy(gender, species, personality, song) %>%
prep(training = cleaned) %>%
bake(new_data = cleaned)
View(preped)
preped <- cleaned %>%
recipe(~ .) %>%
step_dummy(gender, species, personality, song, one_hot = TRUE) %>%
prep(training = cleaned) %>%
bake(new_data = cleaned)
preped <- cleaned %>%
recipe(~ .) %>%
step_string2factor(gender, species, personality, song, one_hot = TRUE) %>%
prep(training = cleaned) %>%
bake(new_data = cleaned)
preped <- cleaned %>%
recipe(~ .) %>%
step_string2factor(gender, species, personality, song) %>%
prep(training = cleaned) %>%
bake(new_data = cleaned)
View(preped)
View(preped)
preped <- cleaned %>%
recipe(~ .) %>%
step_string2factor(gender, species, personality, song) %>%
step_ordinalscore(gender, species, personality, song) %>%
prep(training = cleaned) %>%
bake(new_data = cleaned)
preped <- cleaned %>%
recipe(~ .) %>%
step_string2factor(gender, species, personality, song) %>%
step_integer(gender, species, personality, song) %>%
prep(training = cleaned) %>%
bake(new_data = cleaned)
preped <- cleaned %>%
recipe(~ .) %>%
#step_string2factor(gender, species, personality, song) %>%
step_integer(gender, species, personality, song) %>%
prep(training = cleaned) %>%
bake(new_data = cleaned)
preped <- cleaned %>%
recipe(~ .) %>%
#step_string2factor(gender, species, personality, song) %>%
step_integer(gender, species, personality, song) %>%
prep(training = cleaned) %>%
bake(new_data = cleaned)
View(items)
View(user_reviews)
View(critic)
# Read in the data, although I probably wont need it all.
tdf_winners <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-04-07/tdf_winners.csv')
View(tdf_winners)
install.packages('blogdown')
install.packages("blogdown")
install.packages(c("bayesplot", "brms", "broom", "dplyr", "foreign", "ggplot2", "Hmisc", "janitor", "nlme", "rlang", "testthat"))
blogdown::find_hugo('all')
blogdown::check_hugo()
blogdown::check_netlify()
blogdown::serve_site()
blogdown::config_Rprofile()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
install.packages('simdata')
set.seed(1234) #for reproducability
nG <- 20 #number of groups
nJ <- 30 #cluster size
W1 <- 2 #level 2 coeff
X1 <- 3 #level 1 coeff
tmp2 <- rnorm(nG) #generate 20 random numbers, m = 0, sd = 1
l2 <- rep(tmp2, each = nJ) #all units in l2 have the same value
group <- gl(nG, k = nJ) #creating cluster variable
tmp2 <- rnorm(nG) #error term for level 2
err2 <- rep(tmp2, each = nJ) #all units in l2 have the same value
l1 <- rnorm(nG * nJ) #total sample size is nG * nJ
err1 <- rnorm(nG * nJ) #level 1
#putting it all together
y <- W1 * l2 + X1 * l1 + err2 + err1
dat <- data.frame(y, group, l2, err2,l1, err1)
View(dat)
View(dat)
set.seed(1234) #for reproducability
nG <- 250 #number of groups
nJ <- 18 #cluster size
W1 <- 2 #level 2 coeff
X1 <- 3 #level 1 coeff
tmp2 <- rnorm(nG) #generate 20 random numbers, m = 0, sd = 1
l2 <- rep(tmp2, each = nJ) #all units in l2 have the same value
group <- gl(nG, k = nJ) #creating cluster variable
tmp2 <- rnorm(nG) #error term for level 2
err2 <- rep(tmp2, each = nJ) #all units in l2 have the same value
l1 <- rnorm(nG * nJ) #total sample size is nG * nJ
err1 <- rnorm(nG * nJ) #level 1
#putting it all together
y <- W1 * l2 + X1 * l1 + err2 + err1
dat <- data.frame(y, group, l2, err2,l1, err1)
l2
blogdown:::new_post_addin()
blogdown::stop_server()
blogdown::serve_site()
blogdown:::new_post_addin()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
install.packages('AMSMAth')
blogdown::serve_site()
blogdown::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
