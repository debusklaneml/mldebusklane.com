'Ed Stat Research Meth' = starts_with("educational_statistics"),
'Ed Eval & Research' = starts_with("higher_education_eval"),
'Intern Ed' = starts_with("international"),
'School Psych' = starts_with("school_psychology"),
'Foundations of Ed' = starts_with("social_and_phil"),
'Special Ed' = starts_with("special_ed")) %>%
gather('Counseling':'Special Ed', key = field, value = n_phds) %>%
group_by(year, field) %>%
summarise(tot_phds = sum(na.omit(n_phds))) %>%
arrange(year, desc(tot_phds)) %>%
mutate(ranking = row_number())
down_field <- c("Ed Inst Media Design", "Foundations of Ed", "Measurement")
up_field <- c("Policy Analysis", "Instructional Tech")
ed_research_rank <- ed_research_rank %>%
mutate(swing = ifelse(field %in% down_field, "Down", ifelse(field %in% up_field, "Up", ifelse(field == "Ed Psych", "EdPsych", "None"))))
#Bump Chart - derived from code provided by @parkermquinn
bump <- ed_research_rank %>%
ggplot(aes(year, ranking, group = field)) +
geom_line(aes(color = swing, alpha = .9), size = 2) +
geom_point(aes(color = swing, alpha = .9, size = tot_phds)) +
geom_point(color = "#FFFFFF", size = .6) +
scale_y_reverse(breaks = c(1,2,3,4,5,6,7,8,9,10,11,12,13)) +
my_theme() +
scale_x_continuous(breaks = 2008:2017, minor_breaks = 2008:2017, limits = c(2007, 2018)) +
geom_text(data = ed_research_rank %>% filter(year == 2008),
aes(label = field, x = 2007.8) , hjust = 1, fontface = "bold", color = "#888888", size = 3) +
geom_text(data = ed_research_rank %>% filter(year == 2017),
aes(label = field, x = 2017.2) , hjust = 0, fontface = "bold", color = "#888888", size = 3) +
scale_color_manual(values = c(Down = "#D8B365", Up = "#5AB4AC", None = "gray", EdPsych = "#FA8072")) +
labs(x = "Year", y = "Popularity rank", title = "Educational Research PhDs awarded by field")
blogdown:::serve_site()
blogdown:::serve_site()
knitr::opts_chunk$set(cache = TRUE, warning = FALSE, message = FALSE,
echo = TRUE, dpi = 300, cache.lazy = FALSE,
tidy = "styler", fig.width = 8, fig.height = 7)
library(tidyverse)
library(tidylog)
library(ggdark)
library(ggforce)
# Get the Data
rainfall <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-07/rainfall.csv')
temperature <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-07/temperature.csv')
temp_1 <- temperature %>%
mutate(
year = lubridate::year(date),
month = lubridate::month(date),
day = lubridate::day(date)) %>%
select(-site_name) %>%
pivot_wider(names_from = "temp_type", values_from = "temperature") %>%
filter(!is.na(max),
!is.na(min)) %>%
mutate(city_name = str_to_lower(city_name))
rain_1 <- rainfall %>%
select(-station_code, -lat, -long, -station_name, -period, -quality) %>%
mutate(year = as.numeric(year),
month = as.numeric(month),
day = as.numeric(day)) %>%
mutate(city_name = str_to_lower(city_name))
temp_rain <- left_join(temp_1, rain_1, by = c("city_name", "year", "month", "day")) %>%
mutate(rainfall = if_else(is.na(rainfall), 0, rainfall)) %>%
mutate(avg.temp = (max+min)/2,
rain = if_else(rainfall > 0, 1, 0))
yearly <- temp_rain %>%
filter(year < 2019) %>%
group_by(year) %>%
summarise_each(funs(mean,sd,se=sd(.)/sqrt(n()))) %>%
rename(rain = rainfall_mean,
temp = avg.temp_mean,
se = avg.temp_se) %>%
select(year, rain, temp, se) %>%
mutate(u_se = temp + (1.96 * se),
l_se = temp - (1.96 * se))
temp_dark <- ggplot(yearly, aes(x = year, y = temp)) +
geom_errorbar(aes(ymin=l_se, ymax=u_se), color = "#726A6A", alpha = .2) +
geom_point(aes(size = rain, color = temp)) +
geom_path() +
geom_mark_circle(aes(filter = year == 2014, label = str_wrap("Year: 2014: 18.25C Highest Average Temp")),
color = "orange",
label.family = "American Typewriter Light",
label.fill = "grey10",
label.colour = "white",
label.fontsize = 15,
label.buffer = unit(20, "mm"),
con.colour = "grey") +
geom_mark_circle(aes(filter = year == 1974, label = str_wrap("Year: 1974: 2.22mm Highest Rainfall")),
color = "orange",
label.family = "American Typewriter Light",
label.fill = "grey10",
label.colour = "white",
label.fontsize = 15,
label.buffer = unit(50, "mm"),
con.colour = "grey") +
labs(title = "Average Yearly Temperature and Rain Amount",
x = "Year (1910-2018)",
y = "Average Temperature ((Max - Min)/2)") +
scale_y_continuous(label = label_number_si(unit = "° C", sep = ""))
library(scales)
knitr::opts_chunk$set(cache = TRUE, warning = FALSE, message = FALSE,
echo = TRUE, dpi = 300, cache.lazy = FALSE,
tidy = "styler", fig.width = 8, fig.height = 7)
library(tidyverse)
library(tidylog)
library(ggdark)
library(ggforce)
library(scales)
# Get the Data
rainfall <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-07/rainfall.csv')
temperature <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-07/temperature.csv')
temp_1 <- temperature %>%
mutate(
year = lubridate::year(date),
month = lubridate::month(date),
day = lubridate::day(date)) %>%
select(-site_name) %>%
pivot_wider(names_from = "temp_type", values_from = "temperature") %>%
filter(!is.na(max),
!is.na(min)) %>%
mutate(city_name = str_to_lower(city_name))
rain_1 <- rainfall %>%
select(-station_code, -lat, -long, -station_name, -period, -quality) %>%
mutate(year = as.numeric(year),
month = as.numeric(month),
day = as.numeric(day)) %>%
mutate(city_name = str_to_lower(city_name))
temp_rain <- left_join(temp_1, rain_1, by = c("city_name", "year", "month", "day")) %>%
mutate(rainfall = if_else(is.na(rainfall), 0, rainfall)) %>%
mutate(avg.temp = (max+min)/2,
rain = if_else(rainfall > 0, 1, 0))
yearly <- temp_rain %>%
filter(year < 2019) %>%
group_by(year) %>%
summarise_each(funs(mean,sd,se=sd(.)/sqrt(n()))) %>%
rename(rain = rainfall_mean,
temp = avg.temp_mean,
se = avg.temp_se) %>%
select(year, rain, temp, se) %>%
mutate(u_se = temp + (1.96 * se),
l_se = temp - (1.96 * se))
temp_dark <- ggplot(yearly, aes(x = year, y = temp)) +
geom_errorbar(aes(ymin=l_se, ymax=u_se), color = "#726A6A", alpha = .2) +
geom_point(aes(size = rain, color = temp)) +
geom_path() +
geom_mark_circle(aes(filter = year == 2014, label = str_wrap("Year: 2014: 18.25C Highest Average Temp")),
color = "orange",
label.family = "American Typewriter Light",
label.fill = "grey10",
label.colour = "white",
label.fontsize = 15,
label.buffer = unit(20, "mm"),
con.colour = "grey") +
geom_mark_circle(aes(filter = year == 1974, label = str_wrap("Year: 1974: 2.22mm Highest Rainfall")),
color = "orange",
label.family = "American Typewriter Light",
label.fill = "grey10",
label.colour = "white",
label.fontsize = 15,
label.buffer = unit(50, "mm"),
con.colour = "grey") +
labs(title = "Average Yearly Temperature and Rain Amount",
x = "Year (1910-2018)",
y = "Average Temperature ((Max - Min)/2)") +
scale_y_continuous(label = label_number_si(unit = "° C", sep = ""))
temp_dark + dark_theme_gray(base_family = "American Typewriter Light") +
theme(plot.title = element_text(family = "American Typewriter Light"),
plot.background = element_rect(fill = "grey10"),
panel.background = element_blank(),
panel.grid.major = element_line(color = "grey30", size = 0.2),
panel.grid.minor = element_line(color = "grey30", size = 0.2),
legend.background = element_blank(),
axis.ticks = element_blank(),
legend.key = element_blank(),
legend.position = c(0.85, 0.22))
blogdown:::serve_site()
knitr::opts_chunk$set(cache = TRUE, warning = FALSE, message = FALSE,
echo = TRUE, dpi = 300, cache.lazy = FALSE,
tidy = "styler", fig.width = 8, fig.height = 7)
library(tidyverse)
library(janitor)
library(readxl)
library(skimr)
phd_field <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-02-19/phd_by_field.csv")
#get the gist
skim(phd_field)
ed <- phd_field %>%
filter(broad_field == "Education")
#filter to research field and clean up names a bit
ed_research_rank <- ed %>%
filter(major_field == "Education research") %>%
select(-broad_field, -major_field) %>%
spread(field, n_phds) %>% #just to rename
clean_names() %>%
rename(Counseling = starts_with("Counseling"),
'Curriculum and Inst' = starts_with("curriculum"),
'Ed Inst Media Design' = starts_with("educational_and_instructional_media_design"),
'Instructional Tech' = starts_with("educational_and_instructional_technology"),
'Measurement' = starts_with("educational_assessment"),
'Policy Analysis' = starts_with("educational_policy"),
'Ed Psych' = starts_with("educational_psy"),
'Ed Stat Research Meth' = starts_with("educational_statistics"),
'Ed Eval & Research' = starts_with("higher_education_eval"),
'Intern Ed' = starts_with("international"),
'School Psych' = starts_with("school_psychology"),
'Foundations of Ed' = starts_with("social_and_phil"),
'Special Ed' = starts_with("special_ed")) %>%
gather('Counseling':'Special Ed', key = field, value = n_phds) %>%
group_by(year, field) %>%
summarise(tot_phds = sum(na.omit(n_phds))) %>%
arrange(year, desc(tot_phds)) %>%
mutate(ranking = row_number())
down_field <- c("Ed Inst Media Design", "Foundations of Ed", "Measurement")
up_field <- c("Policy Analysis", "Instructional Tech")
ed_research_rank <- ed_research_rank %>%
mutate(swing = ifelse(field %in% down_field, "Down", ifelse(field %in% up_field, "Up", ifelse(field == "Ed Psych", "EdPsych", "None"))))
#Also stole this from Parker.
my_theme <- function() {
# Colors
color.background = "#f5f5f2"
color.text = "#22211d"
# Begin construction of chart
theme_bw(base_size=15) +
# Format background colors
theme(panel.background = element_rect(fill=color.background, color=color.background)) +
theme(plot.background  = element_rect(fill=color.background, color=color.background)) +
theme(panel.border     = element_rect(color=color.background)) +
theme(strip.background = element_rect(fill=color.background, color=color.background)) +
# Format the grid
theme(panel.grid.major.y = element_blank()) +
theme(panel.grid.minor.y = element_blank()) +
theme(axis.ticks       = element_blank()) +
# Format the legend
theme(legend.position = "none") +
# Format title and axis labels
theme(plot.title       = element_text(color=color.text, size=20, face = "bold.italic")) +
theme(plot.subtitle    = element_text(color=color.text, size=12, face = "italic")) +
theme(axis.title.x     = element_text(size=14, color="black", face = "bold")) +
theme(axis.title.y     = element_text(size=14, color="black", face = "bold", vjust=1.25)) +
theme(axis.text.x      = element_text(size=10, vjust=0.5, hjust=0.5, color = color.text)) +
theme(axis.text.y      = element_text(size=10, color = color.text)) +
theme(strip.text       = element_text(face = "bold")) +
# Plot margins
theme(plot.margin = unit(c(0.35, 0.2, 0.3, 0.35), "cm"))
}
#Bump Chart - derived from code provided by @parkermquinn
bump <- ed_research_rank %>%
ggplot(aes(year, ranking, group = field)) +
geom_line(aes(color = swing, alpha = .9), size = 2) +
geom_point(aes(color = swing, alpha = .9, size = tot_phds)) +
geom_point(color = "#FFFFFF", size = .6) +
scale_y_reverse(breaks = c(1,2,3,4,5,6,7,8,9,10,11,12,13)) +
my_theme() +
scale_x_continuous(breaks = 2008:2017, minor_breaks = 2008:2017, limits = c(2007, 2018)) +
geom_text(data = ed_research_rank %>% filter(year == 2008),
aes(label = field, x = 2007.8) , hjust = 1, fontface = "bold", color = "#888888", size = 3) +
geom_text(data = ed_research_rank %>% filter(year == 2017),
aes(label = field, x = 2017.2) , hjust = 0, fontface = "bold", color = "#888888", size = 3) +
scale_color_manual(values = c(Down = "#D8B365", Up = "#5AB4AC", None = "gray", EdPsych = "#FA8072")) +
labs(x = "Year", y = "Popularity rank", title = "Educational Research PhDs awarded by field")
bump
#Bump Chart - derived from code provided by @parkermquinn
bump <- ed_research_rank %>%
ggplot(aes(year, ranking, group = field)) +
geom_line(aes(color = swing, alpha = .9), size = 2) +
geom_point(aes(color = swing, alpha = .9, size = tot_phds)) +
geom_point(color = "#FFFFFF", size = .6) +
#scale_y_reverse(breaks = c(1,2,3,4,5,6,7,8,9,10,11,12,13)) +
my_theme() +
scale_x_continuous(breaks = 2008:2017, minor_breaks = 2008:2017, limits = c(2007, 2018)) +
geom_text(data = ed_research_rank %>% filter(year == 2008),
aes(label = field, x = 2007.8) , hjust = 1, fontface = "bold", color = "#888888", size = 3) +
geom_text(data = ed_research_rank %>% filter(year == 2017),
aes(label = field, x = 2017.2) , hjust = 0, fontface = "bold", color = "#888888", size = 3) +
scale_color_manual(values = c(Down = "#D8B365", Up = "#5AB4AC", None = "gray", EdPsych = "#FA8072")) +
labs(x = "Year", y = "Popularity rank", title = "Educational Research PhDs awarded by field")
bump
#Bump Chart - derived from code provided by @parkermquinn
bump <- ed_research_rank %>%
ggplot(aes(year, ranking, group = field)) +
geom_line(aes(color = swing, alpha = .9), size = 2) +
geom_point(aes(color = swing, alpha = .9, size = tot_phds)) +
geom_point(color = "#FFFFFF", size = .6) +
scale_y_reverse(breaks = c(1,2,3,4,5,6,7,8,9,10,11,12,13)) +
my_theme() +
scale_x_continuous(breaks = 2008:2017, minor_breaks = 2008:2017, limits = c(2007, 2018)) +
geom_text(data = ed_research_rank %>% filter(year == 2008),
aes(label = field, x = 2007.8) , hjust = 1, fontface = "bold", color = "#888888", size = 3) +
geom_text(data = ed_research_rank %>% filter(year == 2017),
aes(label = field, x = 2017.2) , hjust = 0, fontface = "bold", color = "#888888", size = 3) +
scale_color_manual(values = c(Down = "#D8B365", Up = "#5AB4AC", None = "gray", EdPsych = "#FA8072")) +
labs(x = "Year", y = "Popularity rank", title = "Educational Research PhDs awarded by field")
bump
#Bump Chart - derived from code provided by @parkermquinn
bump <- ed_research_rank %>%
ggplot(aes(year, ranking, group = field)) +
geom_line(aes(color = swing, alpha = .9), size = 2) +
geom_point(aes(color = swing, alpha = .9, size = tot_phds)) +
geom_point(color = "#FFFFFF", size = .6) +
scale_y_reverse(breaks = c(1,2,3,4,5,6,7,8,9,10,11,12,13)) +
my_theme() +
scale_x_continuous(breaks = 2008:2017, minor_breaks = 2008:2017, limits = c(2007, 2018)) +
geom_text(data = ed_research_rank %>% filter(year == 2008),
aes(label = field, x = 2007.8) , hjust = 1, fontface = "bold", color = "#888888", size = 3) +
geom_text(data = ed_research_rank %>% filter(year == 2017),
aes(label = field, x = 2017.2) , hjust = 0, fontface = "bold", color = "#888888", size = 3) +
scale_color_manual(values = c(Down = "#D8B365", Up = "#5AB4AC", None = "gray", EdPsych = "#FA8072")) +
labs(x = "Year", y = "Popularity rank", title = "Educational Research PhDs awarded by field")
bump
#Bump Chart - derived from code provided by @parkermquinn
bump <- ed_research_rank %>%
ggplot(aes(year, ranking, group = field)) +
geom_line(aes(color = swing, alpha = .9), size = 2) +
geom_point(aes(color = swing, alpha = .9, size = tot_phds)) +
geom_point(color = "#FFFFFF", size = .6) +
scale_y_reverse(breaks = c(1,2,3,4,5,6,7,8,9,10,11,12,13)) +
my_theme() +
scale_x_continuous(breaks = 2008:2017, minor_breaks = 2008:2017, limits = c(2007, 2018)) +
geom_text(data = ed_research_rank %>% filter(year == 2008),
aes(label = field, x = 2007.8) , hjust = 1, fontface = "bold", color = "#888888", size = 3) +
geom_text(data = ed_research_rank %>% filter(year == 2017),
aes(label = field, x = 2017.2) , hjust = 0, fontface = "bold", color = "#888888", size = 3) +
scale_color_manual(values = c(Down = "#D8B365", Up = "#5AB4AC", None = "gray", EdPsych = "#FA8072")) +
labs(x = "Year", y = "Popularity Rank", title = "Educational Research PhDs Awarded by Field")
bump
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::serve_site()
knitr::opts_chunk$set(cache = TRUE, warning = FALSE, message = FALSE,
echo = TRUE, dpi = 300, cache.lazy = FALSE,
tidy = "styler", fig.width = 8, fig.height = 7)
iris %>%
skimr::skim()
knitr::opts_chunk$set(cache = TRUE, warning = FALSE, message = FALSE,
echo = TRUE, dpi = 300, cache.lazy = FALSE,
tidy = "styler", fig.width = 8, fig.height = 7)
library(tidyverse)
library(janitor)
library(writexl)
data(iris)
iris %>%
skimr::skim()
? group_by
? group_walk
iris %>%
group_by(Species) %>% # Group by the variable for which you wish to iterate over to create individual files from.
group_walk(~write_xlsx(.x, paste0("iris_", .y$Species, ".xlsx")))
? group_walk
iris %>%
group_by(Species) %>% # Group by the variable for which you wish to iterate over to create individual files from.
group_walk(~write_xlsx(.x, paste0("iris_", .y$Species, ".xlsx"), keep = TRUE))
iris %>%
group_by(Species) %>% # Group by the variable for which you wish to iterate over to create individual files from.
group_walk(~write_xlsx(.x, paste0("iris_", .y$Species, ".xlsx")), keep = TRUE)
? paste0
? group_walk
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
knitr::opts_chunk$set(cache = TRUE, warning = FALSE, message = FALSE,
echo = TRUE, dpi = 300, cache.lazy = FALSE,
fig.width = 8, fig.height = 7)
knitr::include_graphics("sudoku.png")
![test here](sudoku.png)
![testhere](sudoku.png)
knitr::include_graphics("sudoku.png")
blogdown:::serve_site()
knitr::include_graphics("sudoku.png")
knitr::opts_chunk$set(cache = TRUE, warning = FALSE, message = FALSE,
echo = TRUE, dpi = 300, cache.lazy = FALSE,
fig.width = 8, fig.height = 7)
knitr::include_graphics("sudoku.png")
blogdown:::serve_site()
knitr::opts_chunk$set(cache = TRUE, warning = FALSE, message = FALSE,
echo = TRUE, dpi = 300, cache.lazy = FALSE,
fig.width = 8, fig.height = 7)
knitr::include_graphics("sudoku.png")
knitr::opts_chunk$set(cache = TRUE, warning = FALSE, message = FALSE,
echo = TRUE, dpi = 300, cache.lazy = FALSE,
fig.width = 8, fig.height = 7)
library(knitr)
include_graphics("sudoku.png")
include_graphics(content/post/Random_Code/sudoku.png)
library(knitr)
include_graphics(content/post/Random_Code/sudoku.png)
include_graphics("https://raw.githubusercontent.com/debusklaneml/mldebusklane.com/master/content/post/Random_Code/sudoku.png")
board <- c(5,3,0,0,7,0,0,0,0,
6,0,0,1,9,5,0,0,0,
0,9,8,0,0,0,0,6,0,
8,0,0,0,6,0,0,0,3,
4,0,0,8,0,3,0,0,1,
7,0,0,0,2,0,0,0,6,
0,6,0,0,0,0,2,8,0,
0,0,0,4,1,9,0,0,5,
0,0,0,0,8,0,0,7,9)
board <- matrix(board, nrow = 9, ncol = 9, byrow = TRUE)
possible <- function(board, i, j){
# Creates an all TRUE logical vector
possible <- rep(TRUE,9)
# Lists all known numbers from the row, column, and 3x3 cell
selected_num <- unique(c(board[i,], board[,j], board[3*((i-1) %/% 3) + 1:3, 3*((j-1) %/% 3) + 1:3]))
# Removes NAs
selected_num <- na.omit(selected_num)
# Changes the logical vector to FALSE for all values currently in use for the row, column, and 3x3 cell
possible[selected_num] <- FALSE
# Returns this logical vector for use in subsequent functions...
return(possible)
}
# The 'board' argument here provides the matrix, length 81 (9x9), to iterate through.
# The 'progress' argument here provides a starting value to recursively iterate through.
solve_sudoku <- function(board, progress = 81) {
# Provision to make a matrix with 0s into NA for future processing
if  (0 %in% board) {
board[board == 0] <- NA
} else board
# Once all cells have been assessed within the 'possible_choices' function, it stops the recursion.
if (progress == 0) {
# Successfully filled in the board
return(board)
}
# Get the i,j coordinates
# A fancy way to iterate through the coordinate numbers one by one (right to left, bottom to top)
i <- ((progress - 1) %% 9) + 1
j <- ((progress - 1) %/% 9) + 1
# If a spot is open, identifies what numbers are available `choices`
if (is.na(board[i, j])) {
choices <- which(possible_choices(board, i, j))
} else{
choices <- c(board[i, j])
}
# Try each possible choice, until all the requirements of the two functions are satisfied.
for (k in choices) {
board[i, j] <- k
# recursion
answer <- solve_sudoku(board, progress - 1)
# If all possible positions have been completed, simply return the answer.
if (!is.null(answer)) {
return(answer)
}
}
return(NULL)
}
solve(board)
knitr::opts_chunk$set(cache = TRUE, warning = FALSE, message = FALSE,
echo = TRUE, dpi = 300, cache.lazy = FALSE,
fig.width = 8, fig.height = 7)
library(knitr)
include_graphics("https://raw.githubusercontent.com/debusklaneml/mldebusklane.com/master/content/post/Random_Code/sudoku.png")
board <- c(5,3,0,0,7,0,0,0,0,
6,0,0,1,9,5,0,0,0,
0,9,8,0,0,0,0,6,0,
8,0,0,0,6,0,0,0,3,
4,0,0,8,0,3,0,0,1,
7,0,0,0,2,0,0,0,6,
0,6,0,0,0,0,2,8,0,
0,0,0,4,1,9,0,0,5,
0,0,0,0,8,0,0,7,9)
board <- matrix(board, nrow = 9, ncol = 9, byrow = TRUE)
possible <- function(board, i, j){
# Creates an all TRUE logical vector
possible <- rep(TRUE,9)
# Lists all known numbers from the row, column, and 3x3 cell
selected_num <- unique(c(board[i,], board[,j], board[3*((i-1) %/% 3) + 1:3, 3*((j-1) %/% 3) + 1:3]))
# Removes NAs
selected_num <- na.omit(selected_num)
# Changes the logical vector to FALSE for all values currently in use for the row, column, and 3x3 cell
possible[selected_num] <- FALSE
# Returns this logical vector for use in subsequent functions...
return(possible)
}
# The 'board' argument here provides the matrix, length 81 (9x9), to iterate through.
# The 'progress' argument here provides a starting value to recursively iterate through.
solve <- function(board, progress = 81) {
# Provision to make a matrix with 0s into NA for future processing
if  (0 %in% board) {
board[board == 0] <- NA
} else board
# Once all cells have been assessed within the 'possible_choices' function, it stops the recursion.
if (progress == 0) {
# Successfully filled in the board
return(board)
}
# Get the i,j coordinates
# A fancy way to iterate through the coordinate numbers one by one (right to left, bottom to top)
i <- ((progress - 1) %% 9) + 1
j <- ((progress - 1) %/% 9) + 1
# If a spot is open, identifies what numbers are available `choices`
if (is.na(board[i, j])) {
choices <- which(possible(board, i, j))
} else{
choices <- c(board[i, j])
}
# Try each possible choice, until all the requirements of the two functions are satisfied.
for (k in choices) {
board[i, j] <- k
# recursion
answer <- solve(board, progress - 1)
# If all possible positions have been completed, simply return the answer.
if (!is.null(answer)) {
return(answer)
}
}
return(NULL)
}
solve(board)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
