group_by(date, type) %>%
summarize(avg = mean(month_current)) %>%
filter(!type %in% c('Total Grain products', 'Other', 'Total Non-Grain products', 'Total Used'))
time_series1 <- hops1 %>%
ggplot(aes(x = date, y = avg, group = type)) +
geom_line(aes(color = type)) +
theme(axis.text.x = element_text(angle = 90))
time_series1
library(zoo)
library(lubridate)
hops2 <- brewing_materials %>%
mutate(date = make_date(year, month)) %>%
#unite("testdate", year:month, sep = "-") %>%
#mutate(date = zoo::as.yearmon(testdate, "%Y-%m")) %>%
filter(date >= '2008-01-01' & date <= '2014-01-01') %>%
#  %>%
# mutate(date1 = as_date(as.yearmon(date, "%Y-%b")))
group_by(date, type) %>%
summarize(avg = mean(month_current)) %>% ungroup() %>%
filter(type == 'Malt and malt products') %>%
mutate(date = ymd(date, truncated = 1))
#mutate(date2 = as.Date(date))
time_series2 <- hops2 %>%
ggplot(aes(x = date, y = avg, group = type)) +
geom_line(aes(color = type)) +
theme(axis.text.x = element_text(angle = 90))
time_series2
class(hops2)
library(tsibble)
ts <- as_tsibble(hops2, index = date, key = type)
class(ts)
library(TSstudio)
ts_plot(ts,
title = "Malts Over Time",
Ytitle = "Millions of Barrels")
seasonal <- ts(data = ts$avg, start = c(2008, 1), end = c(2014, 1), frequency = 12)
ts_seasonal(seasonal)
library(forecastLM)
lm1 <- trainLM(input = ts,
y = "avg",
trend = list(linear = TRUE),
seasonal = "month")
summary(lm1$model)
plot_res(lm1)
lm2  <- trainLM(input = ts,
y = "avg",
trend = list(linear = TRUE),
seasonal = "month",
lags = c(1))
summary(lm2$model)
plot_res(lm2)
events <- list(outlier = c(as_date("2009-01-01"), as_date("2009-09-01"), as_date("2010-05-01"), as_date("2010-12-01"), as_date("2014-12-01"), as_date("2011-09-01")))
lm3  <- trainLM(input = ts,
y = "avg",
trend = list(linear = TRUE),
seasonal = "month",
lags = c(1),
step = TRUE,
events = events)
summary(lm3$model)
plot_res(lm3)
# Using the lm3 prediction model.
fc3 <- forecastLM(lm3, h = 12)
# Plot it.
plot_fc(fc3)
seasonal <- ts(data = ts$avg, start = c(2008, 1), end = c(2014, 1), frequency = 12)
ts_seasonal(seasonal)
seasonal
lm1 <- trainLM(input = ts,
y = "avg",
trend = list(linear = TRUE),
seasonal = "month")
summary(lm1$model)
lm1.1 <- trainLM(input = seasonal,
y = "avg",
trend = list(linear = TRUE),
seasonal = "month")
plot_res(lm1.1)
lm2  <- trainLM(input = ts,
y = "avg",
trend = list(linear = TRUE),
seasonal = "month",
lags = c(1))
lm1 <- trainLM(input = ts,
y = "avg",
trend = list(linear = TRUE),
seasonal = "month")
summary(lm1$model)
lm1.1 <- trainLM(input = seasonal,
y = "avg",
trend = list(linear = TRUE),
seasonal = "month")
summary(lm1.1)
summary(lm1.1$model)
lm3  <- trainLM(input = seasonal,
y = "avg",
trend = list(linear = TRUE),
seasonal = "month",
lags = c(1),
step = TRUE,
events = events)
summary(lm3$model)
plot_res(lm3)
# Using the lm3 prediction model.
fc3 <- forecastLM(lm3, h = 12)
# Plot it.
plot_fc(fc3)
?forecastLM
? trainLM
lm3  <- trainLM(input = seasonal,
y = "avg",
trend = list(log = TRUE),
seasonal = "month",
lags = c(1),
step = TRUE,
events = events)
summary(lm3$model)
plot_res(lm3)
lm3  <- trainLM(input = seasonal,
y = "avg",
trend = list(log = TRUE),
seasonal = "month",
lags = c(1),
step = TRUE,
events = events,
scale = "log")
summary(lm3$model)
plot_res(lm3)
lm3  <- trainLM(input = seasonal,
y = "avg",
trend = list(log = TRUE),
seasonal = "month",
lags = c(1),
#step = TRUE,
events = events,
scale = "log")
summary(lm3$model)
plot_res(lm3)
step = TRUE,
events = events
step = TRUE,
lm3  <- trainLM(input = seasonal,
y = "avg",
trend = list(log = TRUE),
seasonal = "month",
lags = c(1),
step = TRUE,
events = events)
summary(lm3$model)
plot_res(lm3)
install.packages(TSstudio, dependencies = TRUE)
install.packages("TSstudio", dependencies = TRUE)
old.packages()
version
knitr::opts_chunk$set(cache = TRUE, warning = FALSE, message = FALSE,
echo = TRUE, dpi = 300, cache.lazy = FALSE,
fig.width = 8, fig.height = 7)
library(tidyverse)
library(janitor)
library(readxl)
library(tidylog)
library(ggdark)
library(ggforce)
library(rvest)
library(glue)
library(patchwork)
library(stringi)
library(lubridate)
# Read in the data.
brewing_materials <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/brewing_materials.csv')
beer_taxed <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/beer_taxed.csv')
brewer_size <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/brewer_size.csv')
beer_states <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/beer_states.csv')
knitr::opts_chunk$set(cache = TRUE, warning = FALSE, message = FALSE,
echo = TRUE, dpi = 300, cache.lazy = FALSE,
fig.width = 8, fig.height = 7)
library(tidyverse)
library(janitor)
library(readxl)
library(tidylog)
library(ggdark)
library(ggforce)
library(rvest)
library(glue)
library(patchwork)
library(stringi)
library(lubridate)
# Read in the data.
brewing_materials <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/brewing_materials.csv')
beer_taxed <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/beer_taxed.csv')
brewer_size <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/brewer_size.csv')
beer_states <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/beer_states.csv')
hops1 <- brewing_materials %>%
mutate(date = make_date(year, month)) %>%
group_by(date, type) %>%
summarize(avg = mean(month_current)) %>%
filter(!type %in% c('Total Grain products', 'Other', 'Total Non-Grain products', 'Total Used'))
time_series1 <- hops1 %>%
ggplot(aes(x = date, y = avg, group = type)) +
geom_line(aes(color = type)) +
theme(axis.text.x = element_text(angle = 90))
time_series1
library(zoo)
library(lubridate)
hops2 <- brewing_materials %>%
mutate(date = make_date(year, month)) %>%
#unite("testdate", year:month, sep = "-") %>%
#mutate(date = zoo::as.yearmon(testdate, "%Y-%m")) %>%
filter(date >= '2008-01-01' & date <= '2014-01-01') %>%
#  %>%
# mutate(date1 = as_date(as.yearmon(date, "%Y-%b")))
group_by(date, type) %>%
summarize(avg = mean(month_current)) %>% ungroup() %>%
filter(type == 'Malt and malt products') %>%
mutate(date = ymd(date, truncated = 1))
#mutate(date2 = as.Date(date))
time_series2 <- hops2 %>%
ggplot(aes(x = date, y = avg, group = type)) +
geom_line(aes(color = type)) +
theme(axis.text.x = element_text(angle = 90))
time_series2
knitr::opts_chunk$set(cache = TRUE, warning = FALSE, message = FALSE,
echo = TRUE, dpi = 300, cache.lazy = FALSE,
fig.width = 8, fig.height = 7)
library(tidyverse)
library(janitor)
library(readxl)
library(tidylog)
library(ggdark)
library(ggforce)
library(rvest)
library(glue)
library(patchwork)
library(stringi)
library(lubridate)
# Read in the data.
brewing_materials <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/brewing_materials.csv')
beer_taxed <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/beer_taxed.csv')
brewer_size <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/brewer_size.csv')
beer_states <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/beer_states.csv')
hops1 <- brewing_materials %>%
mutate(date = make_date(year, month)) %>%
group_by(date, type) %>%
summarize(avg = mean(month_current)) %>%
filter(!type %in% c('Total Grain products', 'Other', 'Total Non-Grain products', 'Total Used'))
time_series1 <- hops1 %>%
ggplot(aes(x = date, y = avg, group = type)) +
geom_line(aes(color = type)) +
theme(axis.text.x = element_text(angle = 90))
time_series1
library(zoo)
library(lubridate)
hops2 <- brewing_materials %>%
mutate(date = make_date(year, month)) %>%
#unite("testdate", year:month, sep = "-") %>%
#mutate(date = zoo::as.yearmon(testdate, "%Y-%m")) %>%
filter(date >= '2008-01-01' & date <= '2014-01-01') %>%
#  %>%
# mutate(date1 = as_date(as.yearmon(date, "%Y-%b")))
group_by(date, type) %>%
summarize(avg = mean(month_current)) %>% ungroup() %>%
filter(type == 'Malt and malt products') %>%
mutate(date = ymd(date, truncated = 1))
#mutate(date2 = as.Date(date))
time_series2 <- hops2 %>%
ggplot(aes(x = date, y = avg, group = type)) +
geom_line(aes(color = type)) +
theme(axis.text.x = element_text(angle = 90))
time_series2
class(hops2)
library(tsibble)
ts <- as_tsibble(hops2, index = date, key = type)
class(ts)
library(TSstudio)
ts_plot(ts,
title = "Malts Over Time",
Ytitle = "Millions of Barrels")
seasonal <- ts(data = ts$avg, start = c(2008, 1), end = c(2014, 1), frequency = 12)
ts_seasonal(seasonal)
# Stopped here. I'm using the ts series, which implies monthly data. Look into this.
library(forecastLM)
lm1 <- trainLM(input = ts,
y = "avg",
trend = list(linear = TRUE),
seasonal = "month")
summary(lm1$model)
lm1.1 <- trainLM(input = seasonal,
y = "avg",
trend = list(linear = TRUE),
seasonal = "month")
summary(lm1.1$model)
knitr::opts_chunk$set(cache = TRUE, warning = FALSE, message = FALSE,
echo = TRUE, dpi = 300, cache.lazy = FALSE,
fig.width = 8, fig.height = 7)
library(tidyverse)
library(janitor)
library(readxl)
library(tidylog)
library(ggdark)
library(ggforce)
library(rvest)
library(glue)
library(patchwork)
library(stringi)
library(lubridate)
# Read in the data.
brewing_materials <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/brewing_materials.csv')
beer_taxed <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/beer_taxed.csv')
brewer_size <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/brewer_size.csv')
beer_states <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/beer_states.csv')
hops1 <- brewing_materials %>%
mutate(date = make_date(year, month)) %>%
group_by(date, type) %>%
summarize(avg = mean(month_current)) %>%
filter(!type %in% c('Total Grain products', 'Other', 'Total Non-Grain products', 'Total Used'))
time_series1 <- hops1 %>%
ggplot(aes(x = date, y = avg, group = type)) +
geom_line(aes(color = type)) +
theme(axis.text.x = element_text(angle = 90))
time_series1
library(zoo)
library(lubridate)
hops2 <- brewing_materials %>%
mutate(date = make_date(year, month)) %>%
#unite("testdate", year:month, sep = "-") %>%
#mutate(date = zoo::as.yearmon(testdate, "%Y-%m")) %>%
filter(date >= '2008-01-01' & date <= '2014-01-01') %>%
#  %>%
# mutate(date1 = as_date(as.yearmon(date, "%Y-%b")))
group_by(date, type) %>%
summarize(avg = mean(month_current)) %>% ungroup() %>%
filter(type == 'Malt and malt products') %>%
mutate(date = ymd(date, truncated = 1))
#mutate(date2 = as.Date(date))
time_series2 <- hops2 %>%
ggplot(aes(x = date, y = avg, group = type)) +
geom_line(aes(color = type)) +
theme(axis.text.x = element_text(angle = 90))
time_series2
class(hops2)
library(tsibble)
ts <- as_tsibble(hops2, index = date, key = type)
class(ts)
library(TSstudio)
ts_plot(ts,
title = "Malts Over Time",
Ytitle = "Millions of Barrels")
seasonal <- ts(data = ts$avg, start = c(2008, 1), end = c(2014, 1), frequency = 12)
ts_seasonal(seasonal)
# Stopped here. I'm using the ts series, which implies monthly data. Look into this.
library(forecastLM)
lm1 <- trainLM(input = ts,
y = "avg",
trend = list(linear = TRUE),
seasonal = "month")
summary(lm1$model)
lm1.1 <- trainLM(input = seasonal,
y = "avg",
trend = list(linear = TRUE),
seasonal = "month")
summary(lm1.1$model)
plot_res(lm1.1)
lm2  <- trainLM(input = ts,
y = "avg",
trend = list(linear = TRUE),
seasonal = "month",
lags = c(1))
summary(lm2$model)
plot_res(lm2)
events <- list(outlier = c(as_date("2009-01-01"), as_date("2009-09-01"), as_date("2010-05-01"), as_date("2010-12-01"), as_date("2014-12-01"), as_date("2011-09-01")))
lm3  <- trainLM(input = seasonal,
y = "avg",
trend = list(log = TRUE),
seasonal = "month",
lags = c(1),
step = TRUE,
events = events)
#scale = "log")
summary(lm3$model)
plot_res(lm3)
lm3  <- trainLM(input = ts,
y = "avg",
trend = list(log = TRUE),
seasonal = "month",
lags = c(1),
step = TRUE,
events = events)
lm3  <- trainLM(input = seasonal,
y = "avg",
trend = list(log = TRUE),
seasonal = "month",
lags = c(1),
step = TRUE,
events = events)
lm3  <- trainLM(input = ts,
y = "avg",
trend = list(log = TRUE),
seasonal = "month",
lags = c(1),
step = TRUE,
events = events)
summary(lm3$model)
plot_res(lm3)
# Using the lm3 prediction model.
fc3 <- forecastLM(lm3, h = 12)
# Plot it.
plot_fc(fc3)
lm3  <- trainLM(input = seasonal,
y = "avg",
trend = list(log = TRUE),
seasonal = "month",
lags = c(1),
step = TRUE,
events = events)
knitr::opts_chunk$set(cache = TRUE, warning = FALSE, message = FALSE,
echo = TRUE, dpi = 300, cache.lazy = FALSE,
fig.width = 8, fig.height = 7)
library(tidyverse)
library(janitor)
library(readxl)
library(tidylog)
library(ggdark)
library(ggforce)
library(rvest)
library(glue)
library(patchwork)
library(stringi)
library(lubridate)
# Read in the data.
brewing_materials <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/brewing_materials.csv')
beer_taxed <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/beer_taxed.csv')
brewer_size <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/brewer_size.csv')
beer_states <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/beer_states.csv')
hops1 <- brewing_materials %>%
mutate(date = make_date(year, month)) %>%
group_by(date, type) %>%
summarize(avg = mean(month_current)) %>%
filter(!type %in% c('Total Grain products', 'Other', 'Total Non-Grain products', 'Total Used'))
time_series1 <- hops1 %>%
ggplot(aes(x = date, y = avg, group = type)) +
geom_line(aes(color = type)) +
theme(axis.text.x = element_text(angle = 90))
time_series1
library(zoo)
library(lubridate)
hops2 <- brewing_materials %>%
mutate(date = make_date(year, month)) %>%
#unite("testdate", year:month, sep = "-") %>%
#mutate(date = zoo::as.yearmon(testdate, "%Y-%m")) %>%
filter(date >= '2008-01-01' & date <= '2014-01-01') %>%
#  %>%
# mutate(date1 = as_date(as.yearmon(date, "%Y-%b")))
group_by(date, type) %>%
summarize(avg = mean(month_current)) %>% ungroup() %>%
filter(type == 'Malt and malt products') %>%
mutate(date = ymd(date, truncated = 1))
#mutate(date2 = as.Date(date))
time_series2 <- hops2 %>%
ggplot(aes(x = date, y = avg, group = type)) +
geom_line(aes(color = type)) +
theme(axis.text.x = element_text(angle = 90))
time_series2
class(hops2)
library(tsibble)
ts <- as_tsibble(hops2, index = date, key = type)
class(ts)
library(TSstudio)
ts_plot(ts,
title = "Malts Over Time",
Ytitle = "Millions of Barrels")
seasonal <- ts(data = ts$avg, start = c(2008, 1), end = c(2014, 1), frequency = 12)
ts_seasonal(seasonal)
# Stopped here. I'm using the ts series, which implies monthly data. Look into this.
library(forecastLM)
lm1 <- trainLM(input = ts,
y = "avg",
trend = list(linear = TRUE),
seasonal = "month")
summary(lm1$model)
lm1.1 <- trainLM(input = seasonal,
y = "avg",
trend = list(linear = TRUE),
seasonal = "month")
summary(lm1.1$model)
plot_res(lm1.1)
lm2  <- trainLM(input = ts,
y = "avg",
trend = list(linear = TRUE),
seasonal = "month",
lags = c(1))
summary(lm2$model)
plot_res(lm2)
events <- list(outlier = c(as_date("2009-01-01"), as_date("2009-09-01"), as_date("2010-05-01"), as_date("2010-12-01"), as_date("2014-12-01"), as_date("2011-09-01")))
lm3  <- trainLM(input = seasonal,
y = "avg",
trend = list(log = TRUE),
seasonal = "month",
lags = c(1),
step = TRUE,
events = events)
#scale = "log")
summary(lm3$model)
plot_res(lm3)
# Using the lm3 prediction model.
fc3 <- forecastLM(lm3, h = 12)
# Plot it.
plot_fc(fc3)
# Using the lm3 prediction model.
fc3 <- forecastLM(lm3, h = 48)
# Plot it.
plot_fc(fc3)
sessionInfo()
