summary(lm1$model)
lm1.1 <- trainLM(input = seasonal,
y = "avg",
trend = list(linear = TRUE),
seasonal = "month")
summary(lm1.1$model)
plot_res(lm1.1)
lm2  <- trainLM(input = ts,
y = "avg",
trend = list(linear = TRUE),
seasonal = "month",
lags = c(1))
summary(lm2$model)
plot_res(lm2)
events <- list(outlier = c(as_date("2009-01-01"), as_date("2009-09-01"), as_date("2010-05-01"), as_date("2010-12-01"), as_date("2014-12-01"), as_date("2011-09-01")))
lm3  <- trainLM(input = seasonal,
y = "avg",
trend = list(log = TRUE),
seasonal = "month",
lags = c(1),
step = TRUE,
events = events)
#scale = "log")
summary(lm3$model)
plot_res(lm3)
lm3  <- trainLM(input = ts,
y = "avg",
trend = list(log = TRUE),
seasonal = "month",
lags = c(1),
step = TRUE,
events = events)
lm3  <- trainLM(input = seasonal,
y = "avg",
trend = list(log = TRUE),
seasonal = "month",
lags = c(1),
step = TRUE,
events = events)
lm3  <- trainLM(input = ts,
y = "avg",
trend = list(log = TRUE),
seasonal = "month",
lags = c(1),
step = TRUE,
events = events)
summary(lm3$model)
plot_res(lm3)
# Using the lm3 prediction model.
fc3 <- forecastLM(lm3, h = 12)
# Plot it.
plot_fc(fc3)
lm3  <- trainLM(input = seasonal,
y = "avg",
trend = list(log = TRUE),
seasonal = "month",
lags = c(1),
step = TRUE,
events = events)
knitr::opts_chunk$set(cache = TRUE, warning = FALSE, message = FALSE,
echo = TRUE, dpi = 300, cache.lazy = FALSE,
fig.width = 8, fig.height = 7)
library(tidyverse)
library(janitor)
library(readxl)
library(tidylog)
library(ggdark)
library(ggforce)
library(rvest)
library(glue)
library(patchwork)
library(stringi)
library(lubridate)
# Read in the data.
brewing_materials <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/brewing_materials.csv')
beer_taxed <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/beer_taxed.csv')
brewer_size <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/brewer_size.csv')
beer_states <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/beer_states.csv')
hops1 <- brewing_materials %>%
mutate(date = make_date(year, month)) %>%
group_by(date, type) %>%
summarize(avg = mean(month_current)) %>%
filter(!type %in% c('Total Grain products', 'Other', 'Total Non-Grain products', 'Total Used'))
time_series1 <- hops1 %>%
ggplot(aes(x = date, y = avg, group = type)) +
geom_line(aes(color = type)) +
theme(axis.text.x = element_text(angle = 90))
time_series1
library(zoo)
library(lubridate)
hops2 <- brewing_materials %>%
mutate(date = make_date(year, month)) %>%
#unite("testdate", year:month, sep = "-") %>%
#mutate(date = zoo::as.yearmon(testdate, "%Y-%m")) %>%
filter(date >= '2008-01-01' & date <= '2014-01-01') %>%
#  %>%
# mutate(date1 = as_date(as.yearmon(date, "%Y-%b")))
group_by(date, type) %>%
summarize(avg = mean(month_current)) %>% ungroup() %>%
filter(type == 'Malt and malt products') %>%
mutate(date = ymd(date, truncated = 1))
#mutate(date2 = as.Date(date))
time_series2 <- hops2 %>%
ggplot(aes(x = date, y = avg, group = type)) +
geom_line(aes(color = type)) +
theme(axis.text.x = element_text(angle = 90))
time_series2
class(hops2)
library(tsibble)
ts <- as_tsibble(hops2, index = date, key = type)
class(ts)
library(TSstudio)
ts_plot(ts,
title = "Malts Over Time",
Ytitle = "Millions of Barrels")
seasonal <- ts(data = ts$avg, start = c(2008, 1), end = c(2014, 1), frequency = 12)
ts_seasonal(seasonal)
# Stopped here. I'm using the ts series, which implies monthly data. Look into this.
library(forecastLM)
lm1 <- trainLM(input = ts,
y = "avg",
trend = list(linear = TRUE),
seasonal = "month")
summary(lm1$model)
lm1.1 <- trainLM(input = seasonal,
y = "avg",
trend = list(linear = TRUE),
seasonal = "month")
summary(lm1.1$model)
plot_res(lm1.1)
lm2  <- trainLM(input = ts,
y = "avg",
trend = list(linear = TRUE),
seasonal = "month",
lags = c(1))
summary(lm2$model)
plot_res(lm2)
events <- list(outlier = c(as_date("2009-01-01"), as_date("2009-09-01"), as_date("2010-05-01"), as_date("2010-12-01"), as_date("2014-12-01"), as_date("2011-09-01")))
lm3  <- trainLM(input = seasonal,
y = "avg",
trend = list(log = TRUE),
seasonal = "month",
lags = c(1),
step = TRUE,
events = events)
#scale = "log")
summary(lm3$model)
plot_res(lm3)
# Using the lm3 prediction model.
fc3 <- forecastLM(lm3, h = 12)
# Plot it.
plot_fc(fc3)
# Using the lm3 prediction model.
fc3 <- forecastLM(lm3, h = 48)
# Plot it.
plot_fc(fc3)
sessionInfo()
blogdown:::serve_site()
knitr::opts_chunk$set(cache = TRUE, warning = FALSE, message = FALSE,
echo = TRUE, dpi = 300, cache.lazy = FALSE,
fig.width = 8, fig.height = 7)
library(tsibble)
tsibble <- as_tsibble(hops2, index = date, key = type)
knitr::opts_chunk$set(cache = TRUE, warning = FALSE, message = FALSE,
echo = TRUE, dpi = 300, cache.lazy = FALSE,
fig.width = 8, fig.height = 7)
library(tidyverse)
library(janitor)
library(readxl)
library(tidylog)
library(ggdark)
library(ggforce)
library(rvest)
library(glue)
library(patchwork)
library(stringi)
library(lubridate)
# Read in the data.
brewing_materials <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/brewing_materials.csv')
beer_taxed <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/beer_taxed.csv')
brewer_size <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/brewer_size.csv')
beer_states <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/beer_states.csv')
hops1 <- brewing_materials %>%
mutate(date = make_date(year, month)) %>%
group_by(date, type) %>%
summarize(avg = mean(month_current)) %>%
filter(!type %in% c('Total Grain products', 'Other', 'Total Non-Grain products', 'Total Used'))
time_series1 <- hops1 %>%
ggplot(aes(x = date, y = avg, group = type)) +
geom_line(aes(color = type)) +
theme(axis.text.x = element_text(angle = 90))
time_series1
hops2 <- brewing_materials %>%
mutate(date = make_date(year, month)) %>%
filter(date >= '2008-01-01' & date <= '2014-01-01') %>%
group_by(date, type) %>%
summarize(avg = mean(month_current)) %>% ungroup() %>%
filter(type == 'Malt and malt products') %>%
mutate(date = ymd(date, truncated = 1))
time_series2 <- hops2 %>%
ggplot(aes(x = date, y = avg, group = type)) +
geom_line(aes(color = type)) +
theme(axis.text.x = element_text(angle = 90))
time_series2
class(hops2)
library(tsibble)
tsibble <- as_tsibble(hops2, index = date, key = type)
class(tsibble$date)
head(tsibble$date)
knitr::opts_chunk$set(cache = TRUE, warning = FALSE, message = FALSE,
echo = TRUE, dpi = 300, cache.lazy = FALSE,
fig.width = 8, fig.height = 7)
library(tidyverse)
library(janitor)
library(readxl)
library(tidylog)
library(ggdark)
library(ggforce)
library(rvest)
library(glue)
library(patchwork)
library(stringi)
library(lubridate)
# Read in the data.
brewing_materials <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/brewing_materials.csv')
beer_taxed <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/beer_taxed.csv')
brewer_size <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/brewer_size.csv')
beer_states <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/beer_states.csv')
hops1 <- brewing_materials %>%
mutate(date = make_date(year, month)) %>%
group_by(date, type) %>%
summarize(avg = mean(month_current)) %>%
filter(!type %in% c('Total Grain products', 'Other', 'Total Non-Grain products', 'Total Used'))
time_series1 <- hops1 %>%
ggplot(aes(x = date, y = avg, group = type)) +
geom_line(aes(color = type)) +
theme(axis.text.x = element_text(angle = 90))
time_series1
hops2 <- brewing_materials %>%
mutate(date = make_date(year, month)) %>%
filter(date >= '2008-01-01' & date <= '2014-01-01') %>%
group_by(date, type) %>%
summarize(avg = mean(month_current)) %>% ungroup() %>%
filter(type == 'Malt and malt products') %>%
mutate(date = ymd(date, truncated = 1))
time_series2 <- hops2 %>%
ggplot(aes(x = date, y = avg, group = type)) +
geom_line(aes(color = type)) +
theme(axis.text.x = element_text(angle = 90))
time_series2
class(hops2)
library(tsibble)
tsibble <- as_tsibble(hops2, index = date, key = type)
class(tsibble$date)
head(tsibble$date)
head(tsibble)
tsibble <- tsibble %>%
mutate(date = yearmonth(date))
class(tsibble$date)
class(tsibble)
library(TSstudio)
seasonal <- ts(data = tsibble$avg, start = c(2008, 1), end = c(2014, 1), frequency = 12)
ts_plot(seasonal,
line.mode = "lines+markers",
Ygrid = T, slider = T,
title = "Malts Over Time",
Ytitle = "Millions of Barrels")
ts_cor(seasonal, seasonal_lags = 12, lag.max = 60)
ts_seasonal(seasonal, type = "all")
library(forecastLM)
lm1 <- trainLM(input = tsibble,
y = "avg",
trend = list(linear = TRUE),
seasonal = "month")
summary(lm1$model)
lm1.1 <- trainLM(input = seasonal,
y = "avg",
trend = list(linear = TRUE),
seasonal = "month")
summary(lm1.1$model)
plot_res(lm1.1)
lm2  <- trainLM(input = tsibble,
y = "avg",
trend = list(linear = TRUE),
seasonal = "month",
lags = c(1))
summary(lm2$model)
plot_res(lm2)
events <- list(outlier = c(as_date("2009-01-01"), as_date("2009-09-01"), as_date("2010-05-01"), as_date("2010-12-01"), as_date("2014-12-01"), as_date("2011-09-01")))
lm3  <- trainLM(input = seasonal,
y = "avg",
trend = list(log = TRUE),
seasonal = "month",
lags = c(1),
step = TRUE,
events = events)
#scale = "log")
summary(lm3$model)
plot_res(lm3)
# Using the lm3 prediction model.
fc3 <- forecastLM(lm3, h = 24)
# Plot it.
plot_fc(fc3, theme = 'darkBlue')
library(forecast)
class(hops2)
plot_res(lm1.1)
plot_res(lm1.1)
? plot_fc
# Plot it.
plot_fc(fc3, theme = 'darkPink')
# Plot it.
plot_fc(fc3, theme = 'classic')
? ts_plot
ts_plot(seasonal,
line.mode = "lines+markers",
type = 'multiple',
Ygrid = T, slider = T,
title = "Malts Over Time",
Ytitle = "Millions of Barrels")
ts_plot(seasonal,
line.mode = "lines+markers",
Ygrid = T, slider = T,
title = "Malts Over Time",
Ytitle = "Millions of Barrels")
? ts_cor
plot_res(lm2)
plot_res(lm2)
plot_res(lm2)
blogdown:::serve_site()
blogdown:::serve_site()
ts_cor(seasonal, seasonal_lags = 12, lag.max = 60)
? ts_cor
test <- ts_cor(seasonal, seasonal_lags = 12, lag.max = 60)
test
blogdown:::serve_site()
blogdown:::serve_site()
? ts_cor
knitr::opts_chunk$set(cache = TRUE, warning = FALSE, message = FALSE,
echo = TRUE, dpi = 300, cache.lazy = FALSE,
fig.width = 8, fig.height = 7)
library(tidyverse)
library(janitor)
library(readxl)
library(tidylog)
library(ggdark)
library(ggforce)
library(rvest)
library(glue)
library(patchwork)
library(stringi)
library(lubridate)
# Read in the data.
brewing_materials <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/brewing_materials.csv')
beer_taxed <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/beer_taxed.csv')
brewer_size <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/brewer_size.csv')
beer_states <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/beer_states.csv')
hops1 <- brewing_materials %>%
mutate(date = make_date(year, month)) %>%
group_by(date, type) %>%
summarize(avg = mean(month_current)) %>%
filter(!type %in% c('Total Grain products', 'Other', 'Total Non-Grain products', 'Total Used'))
time_series1 <- hops1 %>%
ggplot(aes(x = date, y = avg, group = type)) +
geom_line(aes(color = type)) +
theme(axis.text.x = element_text(angle = 90))
time_series1
hops2 <- brewing_materials %>%
mutate(date = make_date(year, month)) %>%
filter(date >= '2008-01-01' & date <= '2014-01-01') %>%
group_by(date, type) %>%
summarize(avg = mean(month_current)) %>% ungroup() %>%
filter(type == 'Malt and malt products') %>%
mutate(date = ymd(date, truncated = 1))
time_series2 <- hops2 %>%
ggplot(aes(x = date, y = avg, group = type)) +
geom_line(aes(color = type)) +
theme(axis.text.x = element_text(angle = 90))
time_series2
class(hops2)
library(tsibble)
tsibble <- as_tsibble(hops2, index = date, key = type)
class(tsibble$date)
head(tsibble$date)
head(tsibble)
tsibble <- tsibble %>%
mutate(date = yearmonth(date))
class(tsibble$date)
class(tsibble)
library(TSstudio)
seasonal <- ts(data = tsibble$avg, start = c(2008, 1), end = c(2014, 1), frequency = 12)
ts_plot(seasonal,
line.mode = "lines+markers",
Ygrid = T, slider = T,
title = "Malts Over Time",
Ytitle = "Millions of Barrels")
ts_cor(seasonal, seasonal_lags = 12, lag.max = 60)
data("USgas")
ts_cor(USgas)
blogdown:::serve_site()
? opts_chunk
sessionInfo()
blogdown:::serve_site()
package_version("plotly")
? package_version
package_version(plotly)
install.packages("plotly", dependencies = TRUE)
devtools::install_github("ropensci/plotly")
install.packages("plotly", dependencies = TRUE)
knitr::opts_chunk$set(cache = TRUE, warning = FALSE, message = FALSE,
echo = TRUE, dpi = 300, cache.lazy = FALSE,
fig.width = 8, fig.height = 7)
library(tidyverse)
library(janitor)
library(readxl)
library(tidylog)
library(ggdark)
library(ggforce)
library(rvest)
library(glue)
library(patchwork)
library(stringi)
library(lubridate)
library(plotly)
# Read in the data.
brewing_materials <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/brewing_materials.csv')
beer_taxed <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/beer_taxed.csv')
brewer_size <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/brewer_size.csv')
beer_states <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-31/beer_states.csv')
hops1 <- brewing_materials %>%
mutate(date = make_date(year, month)) %>%
group_by(date, type) %>%
summarize(avg = mean(month_current)) %>%
filter(!type %in% c('Total Grain products', 'Other', 'Total Non-Grain products', 'Total Used'))
time_series1 <- hops1 %>%
ggplot(aes(x = date, y = avg, group = type)) +
geom_line(aes(color = type)) +
theme(axis.text.x = element_text(angle = 90))
time_series1
hops2 <- brewing_materials %>%
mutate(date = make_date(year, month)) %>%
filter(date >= '2008-01-01' & date <= '2014-01-01') %>%
group_by(date, type) %>%
summarize(avg = mean(month_current)) %>% ungroup() %>%
filter(type == 'Malt and malt products') %>%
mutate(date = ymd(date, truncated = 1))
time_series2 <- hops2 %>%
ggplot(aes(x = date, y = avg, group = type)) +
geom_line(aes(color = type)) +
theme(axis.text.x = element_text(angle = 90))
time_series2
class(hops2)
library(tsibble)
tsibble <- as_tsibble(hops2, index = date, key = type)
class(tsibble$date)
head(tsibble$date)
head(tsibble)
tsibble <- tsibble %>%
mutate(date = yearmonth(date))
class(tsibble$date)
class(tsibble)
library(TSstudio)
seasonal <- ts(data = tsibble$avg, start = c(2008, 1), end = c(2014, 1), frequency = 12)
ts_plot(seasonal,
line.mode = "lines+markers",
Ygrid = T, slider = T,
title = "Malts Over Time",
Ytitle = "Millions of Barrels")
ts_cor(seasonal, seasonal_lags = 12, lag.max = 60)
data("USgas")
ts_cor(USgas)
ts_seasonal(seasonal, type = "all")
library(forecastLM)
lm1 <- trainLM(input = tsibble,
y = "avg",
trend = list(linear = TRUE),
seasonal = "month")
summary(lm1$model)
lm2  <- trainLM(input = tsibble,
y = "avg",
trend = list(linear = TRUE),
seasonal = "month",
lags = c(1))
summary(lm2$model)
plot_res(lm2)
events <- list(outlier = c(as_date("2009-01-01"), as_date("2009-09-01"), as_date("2010-05-01"), as_date("2010-12-01"), as_date("2014-12-01"), as_date("2011-09-01")))
lm3  <- trainLM(input = seasonal,
y = "avg",
trend = list(log = TRUE),
seasonal = "month",
lags = c(1),
step = TRUE,
events = events)
#scale = "log")
summary(lm3$model)
plot_res(lm3)
# Using the lm3 prediction model.
fc3 <- forecastLM(lm3, h = 24)
# Plot it.
plot_fc(fc3, theme = 'classic')
library(forecast)
blogdown:::serve_site()
devtools::install_github("ropensci/plotly")
install.packages(c("arrayhelpers", "backports", "bayesplot", "bit", "blob", "bridgesampling", "Cairo", "callr", "car", "checkmate", "chron", "class", "classInt", "cli", "corrr", "covr", "crosstalk", "cubature", "dendextend", "DescTools", "devtools", "DiagrammeR", "diffobj", "digest", "discrim", "e1071", "effects", "emmeans", "fabletools", "fBasics", "feasts", "feather", "ffbase", "fGarch", "fpp3", "fs", "gameofthrones", "gdtools", "GGally", "ggraph", "ggrepel", "ggridges", "ggstance", "gh", "gplots", "graphlayouts", "gss", "gtools", "harrypotter", "hexbin", "hms", "hrbrthemes", "htmlTable", "igraph", "imager", "insight", "isoband", "ISOcodes", "janitor", "jomo", "jsonlite", "lattice", "latticeExtra", "lava", "lifecycle", "lintr", "lpSolve", "magick", "mapproj", "maptools", "matrixStats", "mclust", "mice", "mime", "mnormt", "multcomp", "mvtnorm", "naniar", "nlme", "nloptr", "nnet", "ordinal", "padr", "paletteer", "palr", "parsnip", "pbkrtest", "PerformanceAnalytics", "polspline", "prettyunits", "pROC", "processx", "progress", "ps", "quantmod", "quantreg", "Rcmdr", "RcmdrMisc", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RCurl", "rematch2", "reshape2", "rgexf", "RgoogleMaps", "rjags", "rms", "rsample", "rsconnect", "RSQLite", "rstanarm", "rstudioapi", "Rttf2pt1", "runjags", "selectr", "servr", "sf", "shinyjs", "sjlabelled", "snakecase", "SnowballC", "sp", "SparseM", "SQUAREM", "StanHeaders", "stringdist", "stringi", "sugrrants", "summarytools", "survey", "survival", "svglite", "swirl", "tables", "testthat", "text2vec", "textrecipes", "threejs", "tibble", "tidymodels", "tidypredict", "tidyquant", "tidytext", "timeSeries", "timetk", "tinytex", "TSP", "units", "usethis", "uuid", "vip", "writexl", "xaringan", "xfun", "XML", "xml2", "yaml"))
install.packages(c("arrayhelpers", "backports", "bayesplot", "bit", "blob", "bridgesampling", "Cairo", "callr", "car", "checkmate", "chron", "class", "classInt", "cli", "corrr", "covr", "crosstalk", "cubature", "dendextend", "DescTools", "devtools", "DiagrammeR", "diffobj", "digest", "discrim", "e1071", "effects", "emmeans", "fabletools", "fBasics", "feasts", "feather", "ffbase", "fGarch", "fpp3", "fs", "gameofthrones", "gdtools", "GGally", "ggraph", "ggrepel", "ggridges", "ggstance", "gh", "gplots", "graphlayouts", "gss", "gtools", "harrypotter", "hexbin", "hms", "hrbrthemes", "htmlTable", "igraph", "imager", "insight", "isoband", "ISOcodes", "janitor", "jomo", "jsonlite", "lattice", "latticeExtra", "lava", "lifecycle", "lintr", "lpSolve", "magick", "mapproj", "maptools", "matrixStats", "mclust", "mice", "mime", "mnormt", "multcomp", "mvtnorm", "naniar", "nlme", "nloptr", "nnet", "ordinal", "padr", "paletteer", "palr", "parsnip", "pbkrtest", "PerformanceAnalytics", "polspline", "prettyunits", "pROC", "processx", "progress", "ps", "quantmod", "quantreg", "Rcmdr", "RcmdrMisc", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RCurl", "rematch2", "reshape2", "rgexf", "RgoogleMaps", "rjags", "rms", "rsample", "rsconnect", "RSQLite", "rstanarm", "rstudioapi", "Rttf2pt1", "runjags", "selectr", "servr", "sf", "shinyjs", "sjlabelled", "snakecase", "SnowballC", "sp", "SparseM", "SQUAREM", "StanHeaders", "stringdist", "stringi", "sugrrants", "summarytools", "survey", "survival", "svglite", "swirl", "tables", "testthat", "text2vec", "textrecipes", "threejs", "tibble", "tidymodels", "tidypredict", "tidyquant", "tidytext", "timeSeries", "timetk", "tinytex", "TSP", "units", "usethis", "uuid", "vip", "writexl", "xaringan", "xfun", "XML", "xml2", "yaml"))
install.packages(c("arrayhelpers", "backports", "bayesplot", "bit", "blob", "bridgesampling", "Cairo", "callr", "car", "checkmate", "chron", "class", "classInt", "cli", "corrr", "covr", "crosstalk", "cubature", "dendextend", "DescTools", "devtools", "DiagrammeR", "diffobj", "digest", "discrim", "e1071", "effects", "emmeans", "fabletools", "fBasics", "feasts", "feather", "ffbase", "fGarch", "fpp3", "fs", "gameofthrones", "gdtools", "GGally", "ggraph", "ggrepel", "ggridges", "ggstance", "gh", "gplots", "graphlayouts", "gss", "gtools", "harrypotter", "hexbin", "hms", "hrbrthemes", "htmlTable", "igraph", "imager", "insight", "isoband", "ISOcodes", "janitor", "jomo", "jsonlite", "lattice", "latticeExtra", "lava", "lifecycle", "lintr", "lpSolve", "magick", "mapproj", "maptools", "matrixStats", "mclust", "mice", "mime", "mnormt", "multcomp", "mvtnorm", "naniar", "nlme", "nloptr", "nnet", "ordinal", "padr", "paletteer", "palr", "parsnip", "pbkrtest", "PerformanceAnalytics", "polspline", "prettyunits", "pROC", "processx", "progress", "ps", "quantmod", "quantreg", "Rcmdr", "RcmdrMisc", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RCurl", "rematch2", "reshape2", "rgexf", "RgoogleMaps", "rjags", "rms", "rsample", "rsconnect", "RSQLite", "rstanarm", "rstudioapi", "Rttf2pt1", "runjags", "selectr", "servr", "sf", "shinyjs", "sjlabelled", "snakecase", "SnowballC", "sp", "SparseM", "SQUAREM", "StanHeaders", "stringdist", "stringi", "sugrrants", "summarytools", "survey", "survival", "svglite", "swirl", "tables", "testthat", "text2vec", "textrecipes", "threejs", "tibble", "tidymodels", "tidypredict", "tidyquant", "tidytext", "timeSeries", "timetk", "tinytex", "TSP", "units", "usethis", "uuid", "vip", "writexl", "xaringan", "xfun", "XML", "xml2", "yaml"))
install.packages(c("arrayhelpers", "backports", "bayesplot", "bit", "blob", "bridgesampling"))
install.packages(c("Cairo", "callr", "car", "checkmate", "chron", "class", "classInt", "cli"))
install.packages(c("Cairo", "callr", "car", "checkmate", "chron", "class", "classInt", "cli"))
install.packages(c("Cairo", "callr", "car", "checkmate", "chron", "class", "classInt", "cli"))
install.packages(c("corrr", "covr", "crosstalk", "cubature", "dendextend", "DescTools", "devtools"))
install.packages(c("DiagrammeR", "diffobj", "discrim", "e1071", "effects", "emmeans", "fabletools", "fBasics", "feasts", "feather", "ffbase", "fGarch", "fpp3", "fs", "gameofthrones", "gdtools", "GGally", "ggraph", "ggrepel", "ggridges", "ggstance", "gplots", "graphlayouts", "gss", "gtools", "harrypotter", "hexbin", "hms", "hrbrthemes", "htmlTable", "igraph", "imager", "insight", "isoband", "ISOcodes", "janitor", "jomo", "lattice", "latticeExtra", "lava", "lifecycle", "lintr", "lpSolve", "magick", "mapproj", "maptools", "matrixStats", "mclust", "mice", "mime", "mnormt", "multcomp", "mvtnorm", "naniar", "nlme", "nloptr", "nnet", "ordinal", "padr", "paletteer", "palr", "parsnip", "pbkrtest", "PerformanceAnalytics", "polspline", "prettyunits", "pROC", "processx", "progress", "ps", "quantmod", "quantreg", "Rcmdr", "RcmdrMisc", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RCurl", "rematch2", "reshape2", "rgexf", "RgoogleMaps", "rjags", "rms", "rsample", "rsconnect", "RSQLite", "rstanarm", "Rttf2pt1", "runjags", "selectr", "servr", "sf", "shinyjs", "sjlabelled", "snakecase", "SnowballC", "sp", "SparseM", "SQUAREM", "StanHeaders", "stringdist", "stringi", "sugrrants", "summarytools", "survey", "survival", "svglite", "swirl", "tables", "text2vec", "textrecipes", "threejs", "tibble", "tidymodels", "tidypredict", "tidyquant", "tidytext", "timeSeries", "timetk", "tinytex", "TSP", "units", "uuid", "vip", "writexl", "xaringan", "xfun", "XML", "xml2", "yaml"))
install.packages("nlme")
